<#
Vulnerability Scan Tool
Author: Your Name
Purpose: A basic PowerShell script for scanning a Windows system for common vulnerabilities.
Version: 1.0
Usage: Run this script in PowerShell as Administrator.
Disclaimer: This script is for educational purposes only. Use responsibly and at your own risk.

Steps to Use:
1. Save this script with a .ps1 extension (e.g., VulnerabilityScan_Manual.ps1).
2. Open PowerShell as Administrator.
3. Navigate to the folder where this script is saved.
4. Run the script using: .\VulnerabilityScan_Manual.ps1
5. Review the output in PowerShell for any vulnerabilities.

Full Explanation:
Each section of the script performs a specific task. Print statements are included to guide you through the process and explain the findings.

#>

Write-Host "-------------------------------------------------------------" -ForegroundColor Cyan
Write-Host "            Vulnerability Scanner Tool - Manual              " -ForegroundColor Cyan
Write-Host "-------------------------------------------------------------" -ForegroundColor Cyan

Write-Host "Step 1: Checking for outdated software..." -ForegroundColor Yellow
Write-Host "The following list shows all installed software with their versions."
Write-Host "You can use this information to identify outdated or unsupported software." -ForegroundColor Green
Get-WmiObject -Class Win32_Product | Select-Object Name, Version | Sort-Object Name

Write-Host "-------------------------------------------------------------" -ForegroundColor Cyan

Write-Host "Step 2: Checking for missing Windows updates..." -ForegroundColor Yellow
Write-Host "Review the output below to identify any missing critical updates."
Write-Host "Keeping your system updated is crucial for security." -ForegroundColor Green
Get-WindowsUpdateLog | Select-String -Pattern "Missing"

Write-Host "-------------------------------------------------------------" -ForegroundColor Cyan

Write-Host "Step 3: Checking Windows Firewall status..." -ForegroundColor Yellow
Write-Host "A properly configured firewall is essential for system protection."
Write-Host "The following table shows the status of firewall profiles (Enabled/Disabled)." -ForegroundColor Green
$firewallStatus = Get-NetFirewallProfile | Select-Object Name, Enabled
$firewallStatus | ForEach-Object {
    Write-Host ("Firewall for " + $_.Name + ": " + ($_.Enabled ? "Enabled" : "Disabled"))
}

Write-Host "-------------------------------------------------------------" -ForegroundColor Cyan

Write-Host "Step 4: Scanning for open and listening ports..." -ForegroundColor Yellow
Write-Host "Open ports can be exploited if unnecessary services are running." -ForegroundColor Green
Write-Host "Review the following list of open and listening ports." -ForegroundColor Green
netstat -an | Select-String "LISTENING"

Write-Host "-------------------------------------------------------------" -ForegroundColor Cyan

Write-Host "Step 5: Checking password policies..." -ForegroundColor Yellow
Write-Host "Weak password policies can expose your system to attacks."
Write-Host "The following list shows local user accounts and their password-related policies." -ForegroundColor Green
Get-LocalUser | Select-Object Name, PasswordRequired, PasswordChangeable, PasswordNeverExpires

Write-Host "-------------------------------------------------------------" -ForegroundColor Cyan

Write-Host "Step 6: Checking for potentially dangerous services..." -ForegroundColor Yellow
Write-Host "Unnecessary or misconfigured services running automatically can pose a security risk."
Write-Host "The following list shows services that start automatically and are currently running." -ForegroundColor Green
Get-Service | Where-Object { $_.StartType -eq "Automatic" -and $_.Status -eq "Running" } | 
Select-Object DisplayName, Status, StartType

Write-Host "-------------------------------------------------------------" -ForegroundColor Cyan

Write-Host "Step 7: Checking for accounts with elevated privileges..." -ForegroundColor Yellow
Write-Host "Review accounts with admin privileges to ensure there are no unauthorized users." -ForegroundColor Green
Get-LocalGroupMember -Group "Administrators" | Select-Object Name, ObjectClass

Write-Host "-------------------------------------------------------------" -ForegroundColor Cyan
Write-Host "Vulnerability scan completed. Review the findings above and take necessary actions." -ForegroundColor Yellow
Write-Host "-------------------------------------------------------------" -ForegroundColor Cyan
